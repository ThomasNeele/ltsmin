%include {
#include <hre/config.h>
#include <assert.h>
#include <stdlib.h>

#include <hre-io/stream.h>
#include <hre/user.h>
#include <hre/stringindex.h>
#include <util-lib/chunk_support.h>
#include <ltsmin-lib/exp-parse-env.h>
#include <ltsmin-lib/exp-syntax.h>
#include <ltsmin-lib/exp-grammar.h>
}

/* Section common parser configuration.

This section is shared by the parsers for all LTSmin languages.
*/

%name expParse
%token_prefix TOKEN_
%token_type { int }
%syntax_error {
    (void)yymajor;(void)yyminor;
    if (env->lineno == 0) {
        HREmessage(error,"%s: syntax error near pos %d", env->filename, env->linepos+1);
    } else {
        HREmessage(error,"%s: syntax error near line %d, pos %d. Token: %s", env->filename, env->lineno+1,env->linepos+1, yyTokenName[TOKEN]);
    }
}
%parse_failure { HREabort(0); }
%parse_accept { Warning(infoLong,"success!"); }
%extra_argument { exp_parse_env_t env }
%stack_overflow {
    (void)yypMinor;
    Abort("stack overflow");
}

/* Section EXP grammar

This section contains the grammar definition of EXP.
*/

input ::= exp_spec(E) . {
    Warning(infoLong,"parsing finished");
    env->model = E;
    Warning(debug,"EXP model has %d processes", E->num_processes);
    Warning(debug,"EXP model has %d syncronization rules", E->num_sync_rules);
}
input ::= ERROR . {
    Abort("The error token is meant to give the lexer a way of passing the error.");
}

exp_spec(E) ::= PAR sync_section(S) IN proc_section(P) END PAR . {
    E = RTmalloc(sizeof(struct exp_model_s));
    E->num_processes = expListLength(P);
    E->processes = (struct exp_model_s*) expListToArray(P, sizeof(struct exp_model_s));
    E->num_sync_rules = expListLength(S);
    E->sync_rules = (char***) expListToArray(S, sizeof(char**));
}
exp_spec(E) ::= DES LPAR NUMBER(INITIAL_STATE) COMMA NUMBER(num_transitions) COMMA NUMBER(num_states) RPAR trans_list(Tr) . {
    char*** transitions = RTmalloc(sizeof(char**) * num_states);
    memset(transitions, 0, sizeof(char**) * num_states);
    list_t current = Tr;
    while(current) {
        transition_t current_trans = current->item;
        if(transitions[current_trans->source] == NULL) {
            transitions[current_trans->source] = RTmalloc(sizeof(char*) * num_states);
        }
        transitions[current_trans->source][current_trans->destination] = current_trans->label;
        list_t prev = current->prev;
        RTfree(current);
        current = prev;
    }
    E = RTmalloc(sizeof(struct exp_model_s));
    E->num_processes = 0;
    E->process_states = num_states;
    E->process_transitions = num_transitions;
    E->initial_state = INITIAL_STATE;
    E->transitions = transitions;

}
exp_spec(E) ::= STRING(filename) . {
    E = exp_recur_parse_stream(env->scanner, SIget( env->strings, filename) );
}

exp_spec ::= error . {
    HREprintf (error, "EXP syntax error.\n");
    HREabort(0);
}

sync_section(L) ::= sync_section(A) sync_rule(B) . {
    char*** a = RTmalloc(sizeof(char**));
    *a = B;
    L = expAddList(A,a);
}
sync_section(L) ::= . { L = NULL; }
sync_rule(R) ::= actions(A) ARROW ACTION(B) . {
    char** a = RTmalloc(sizeof(char*));
    *a = SIget(env->strings, B);
    list_t action_list = expAddList(A,a);
    R = (char**) expListToArray(action_list, sizeof(char*));
}
actions(L) ::= actions(A) STAR action(B) . { char** a = RTmalloc(sizeof(char*)); *a = B; L = expAddList(A,a); }
actions(L) ::= action(A) . { char** a = RTmalloc(sizeof(char*)); *a = A; L = expAddList(NULL,a); }
action(A) ::= UNDERSCORE . { A = NULL; }
action(A) ::= ACTION(B) . { A = SIget(env->strings, B); }

proc_section(L) ::= proc_section(A) BARS exp_spec(B) . { L = expAddList(A,B); }
proc_section(L) ::= exp_spec(A) . { L = expAddList(NULL,A); }


trans_list(L) ::= trans_list(A) trans(T) . { L = expAddList(A,T); }
trans_list(L) ::= . { L = NULL; }
trans(Tr) ::= LPAR NUMBER(S) COMMA STRING(A) COMMA NUMBER(T) RPAR . {
    transition_t trans = RTmalloc(sizeof(struct transition_s));
    trans->source = S;
    trans->label = SIget(env->strings, A);
    trans->destination = T;
    Tr = trans;
}

%type exp_spec { exp_model_t }
%destructor exp_spec {
    if($$->sync_rules)
        RTfree($$->sync_rules);
    if($$->processes)
        RTfree($$->processes);
    if($$->transitions)
        RTfree($$->transitions);
}

%type sync_section { list_t }
%destructor sync_section { expListFree($$); }
%type sync_rule { char** }
%destructor sync_rule { RTfree($$); }
%type actions { list_t }
%destructor actions { expListFree($$); }
%type action { char* }
%destructor action { if($$) {RTfree($$);} }

%type proc_section { list_t }
%destructor proc_section { expListFree($$); }
%type trans_list { list_t }
%destructor trans_list { expListFree($$); }
%type trans { transition_t }
%destructor trans { RTfree($$->label); RTfree($$); }


%left ARROW .
%left STAR .

%left BARS .

/* generates a special USER token so that the user knows the value of the last reserved token */
/* must be at the end of the file */
%left USER
